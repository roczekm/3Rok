//--------------------------------------------------------------------------------
// Code generated by jFuzzyLogic
// jFuzzyLogic Version : JFuzzyLogic 3.3 (build 2015-04-09), by Pablo Cingolani 
// jFuzzyLogic creted by Pablo Cingolani
//--------------------------------------------------------------------------------


#include <stdio.h>

#include <stdlib.h>
double ruleAccumulationMethod_max(double defuzzifierValue, double valueToAggregate)	{ return ( defuzzifierValue > valueToAggregate ? defuzzifierValue : valueToAggregate ); }

double ruleActivationMethod_min(double degreeOfSupport, double membership)	{ return (degreeOfSupport < membership ? degreeOfSupport : membership); }

double ruleConnectionMethod_and(double antecedent1, double antecedent2)	{ return (antecedent1 < antecedent2 ? antecedent1 : antecedent2); }

class FunctionBlock_test {

	public: 
	// VAR_INPUT
	double temperatura_in;
	double temperatura_out;

	// VAR_OUTPUT
	double klima;

	private: 
	// FUZZIFY temperatura_in
	double temperatura_in_chlodno;
	double temperatura_in_cieplo;
	double temperatura_in_goraco;
	double temperatura_in_umiarkowanie;
	double temperatura_in_zimno;

	// FUZZIFY temperatura_out
	double temperatura_out_chlodno;
	double temperatura_out_cieplo;
	double temperatura_out_goraco;
	double temperatura_out_umiarkowanie;
	double temperatura_out_zimno;


	// DEFUZZIFY klima
	double defuzzify_klima[1000];


	public:
	FunctionBlock_test();
	void calc();
	void print();

	private:
	void defuzzify();
	void fuzzify();
	void reset();
	double membership_klima_COOL(double x);
	double membership_klima_COOL2(double x);
	double membership_klima_HEAT(double x);
	double membership_klima_HEAT2(double x);
	double membership_klima_OFF(double x);
	double membership_temperatura_in_chlodno(double x);
	double membership_temperatura_in_cieplo(double x);
	double membership_temperatura_in_goraco(double x);
	double membership_temperatura_in_umiarkowanie(double x);
	double membership_temperatura_in_zimno(double x);
	double membership_temperatura_out_chlodno(double x);
	double membership_temperatura_out_cieplo(double x);
	double membership_temperatura_out_goraco(double x);
	double membership_temperatura_out_umiarkowanie(double x);
	double membership_temperatura_out_zimno(double x);
	void calc_No1();

};

// Constructor
FunctionBlock_test::FunctionBlock_test() {
	klima = 0.0;
}

// Calculate function block
void FunctionBlock_test::calc() {
	reset();
	fuzzify();
	calc_No1();
	defuzzify();
}

// RULEBLOCK No1
void FunctionBlock_test::calc_No1() {
	// RULE 1 : IF (temperatura_in IS zimno) AND (temperatura_out IS zimno) THEN klima IS HEAT2;
	double degreeOfSupport_1 = 1.0 * ( ruleConnectionMethod_and(temperatura_in_zimno , temperatura_out_zimno) );
	if( degreeOfSupport_1 > 0 ) {
		for (int i = 0 ; i < 1000 ; i++ ) {
			double x = 0.0 + i * 0.5;
			double membership = membership_klima_HEAT2(x);
			double y = ruleActivationMethod_min( degreeOfSupport_1 , membership );
			defuzzify_klima[i] += ruleAccumulationMethod_max( defuzzify_klima[i], y );
		}
	}

	// RULE 2 : IF (temperatura_in IS chlodno) AND (temperatura_out IS chlodno) THEN klima IS HEAT;
	double degreeOfSupport_2 = 1.0 * ( ruleConnectionMethod_and(temperatura_in_chlodno , temperatura_out_chlodno) );
	if( degreeOfSupport_2 > 0 ) {
		for (int i = 0 ; i < 1000 ; i++ ) {
			double x = 0.0 + i * 0.5;
			double membership = membership_klima_HEAT(x);
			double y = ruleActivationMethod_min( degreeOfSupport_2 , membership );
			defuzzify_klima[i] += ruleAccumulationMethod_max( defuzzify_klima[i], y );
		}
	}

	// RULE 3 : IF (temperatura_in IS umiarkowanie) AND (temperatura_out IS umiarkowanie) THEN klima IS OFF;
	double degreeOfSupport_3 = 1.0 * ( ruleConnectionMethod_and(temperatura_in_umiarkowanie , temperatura_out_umiarkowanie) );
	if( degreeOfSupport_3 > 0 ) {
		for (int i = 0 ; i < 1000 ; i++ ) {
			double x = 0.0 + i * 0.5;
			double membership = membership_klima_OFF(x);
			double y = ruleActivationMethod_min( degreeOfSupport_3 , membership );
			defuzzify_klima[i] += ruleAccumulationMethod_max( defuzzify_klima[i], y );
		}
	}

	// RULE 4 : IF (temperatura_in IS cieplo) AND (temperatura_out IS cieplo) THEN klima IS COOL;
	double degreeOfSupport_4 = 1.0 * ( ruleConnectionMethod_and(temperatura_in_cieplo , temperatura_out_cieplo) );
	if( degreeOfSupport_4 > 0 ) {
		for (int i = 0 ; i < 1000 ; i++ ) {
			double x = 0.0 + i * 0.5;
			double membership = membership_klima_COOL(x);
			double y = ruleActivationMethod_min( degreeOfSupport_4 , membership );
			defuzzify_klima[i] += ruleAccumulationMethod_max( defuzzify_klima[i], y );
		}
	}

	// RULE 5 : IF (temperatura_in IS goraco) AND (temperatura_out IS goraco) THEN klima IS COOL2;
	double degreeOfSupport_5 = 1.0 * ( ruleConnectionMethod_and(temperatura_in_goraco , temperatura_out_goraco) );
	if( degreeOfSupport_5 > 0 ) {
		for (int i = 0 ; i < 1000 ; i++ ) {
			double x = 0.0 + i * 0.5;
			double membership = membership_klima_COOL2(x);
			double y = ruleActivationMethod_min( degreeOfSupport_5 , membership );
			defuzzify_klima[i] += ruleAccumulationMethod_max( defuzzify_klima[i], y );
		}
	}

}

// Defuzzify 
void FunctionBlock_test::defuzzify() {
	double sum_klima = 0.0;
	double wsum_klima = 0.0;
	for (int i = 0; i < 1000 ; i++ ) {
		double x = 0.0 + i * 0.5;
		sum_klima += defuzzify_klima[i];
		wsum_klima += x * defuzzify_klima[i];
	}
	klima = wsum_klima / sum_klima;
}

// Fuzzify all variables
void FunctionBlock_test::fuzzify() {
	temperatura_in_chlodno = membership_temperatura_in_chlodno(temperatura_in);
	temperatura_in_cieplo = membership_temperatura_in_cieplo(temperatura_in);
	temperatura_in_goraco = membership_temperatura_in_goraco(temperatura_in);
	temperatura_in_umiarkowanie = membership_temperatura_in_umiarkowanie(temperatura_in);
	temperatura_in_zimno = membership_temperatura_in_zimno(temperatura_in);
	temperatura_out_chlodno = membership_temperatura_out_chlodno(temperatura_out);
	temperatura_out_cieplo = membership_temperatura_out_cieplo(temperatura_out);
	temperatura_out_goraco = membership_temperatura_out_goraco(temperatura_out);
	temperatura_out_umiarkowanie = membership_temperatura_out_umiarkowanie(temperatura_out);
	temperatura_out_zimno = membership_temperatura_out_zimno(temperatura_out);
}

// Membership functions 
double FunctionBlock_test::membership_klima_COOL(double x) {
	if ( x <= 100.0 )	return 1.0;
	if ( x > 200.0 )	return 0.0;
	if ( x <= 150.0 )	return 1.0 + ( 1.0 - 1.0 ) * ( ( x - 100.0 ) / ( 150.0 - 100.0 ) );
	if ( x <= 200.0 )	return 1.0 + ( 0.0 - 1.0 ) * ( ( x - 150.0 ) / ( 200.0 - 150.0 ) );
}

double FunctionBlock_test::membership_klima_COOL2(double x) {
	if ( x <= 150.0 )	return 1.0;
	if ( x > 250.0 )	return 0.0;
	if ( x <= 200.0 )	return 1.0 + ( 1.0 - 1.0 ) * ( ( x - 150.0 ) / ( 200.0 - 150.0 ) );
	if ( x <= 250.0 )	return 1.0 + ( 0.0 - 1.0 ) * ( ( x - 200.0 ) / ( 250.0 - 200.0 ) );
}

double FunctionBlock_test::membership_klima_HEAT(double x) {
	if ( x <= 250.0 )	return 1.0;
	if ( x > 400.0 )	return 0.0;
	if ( x <= 300.0 )	return 1.0 + ( 1.0 - 1.0 ) * ( ( x - 250.0 ) / ( 300.0 - 250.0 ) );
	if ( x <= 400.0 )	return 1.0 + ( 0.0 - 1.0 ) * ( ( x - 300.0 ) / ( 400.0 - 300.0 ) );
}

double FunctionBlock_test::membership_klima_HEAT2(double x) {
	if ( x <= 400.0 )	return 1.0;
	if ( x > 500.0 )	return 0.0;
	if ( x <= 450.0 )	return 1.0 + ( 1.0 - 1.0 ) * ( ( x - 400.0 ) / ( 450.0 - 400.0 ) );
	if ( x <= 500.0 )	return 1.0 + ( 0.0 - 1.0 ) * ( ( x - 450.0 ) / ( 500.0 - 450.0 ) );
}

double FunctionBlock_test::membership_klima_OFF(double x) {
	if ( x <= 0.0 )	return 1.0;
	if ( x > 100.0 )	return 0.0;
	if ( x <= 50.0 )	return 1.0 + ( 1.0 - 1.0 ) * ( ( x - 0.0 ) / ( 50.0 - 0.0 ) );
	if ( x <= 100.0 )	return 1.0 + ( 0.0 - 1.0 ) * ( ( x - 50.0 ) / ( 100.0 - 50.0 ) );
}

double FunctionBlock_test::membership_temperatura_in_chlodno(double x) {
	if ( x <= 16.0 )	return 1.0;
	if ( x > 19.0 )	return 0.0;
	if ( x <= 18.0 )	return 1.0 + ( 1.0 - 1.0 ) * ( ( x - 16.0 ) / ( 18.0 - 16.0 ) );
	if ( x <= 19.0 )	return 1.0 + ( 0.0 - 1.0 ) * ( ( x - 18.0 ) / ( 19.0 - 18.0 ) );
}

double FunctionBlock_test::membership_temperatura_in_cieplo(double x) {
	if ( x <= 21.0 )	return 1.0;
	if ( x > 24.0 )	return 0.0;
	if ( x <= 23.0 )	return 1.0 + ( 1.0 - 1.0 ) * ( ( x - 21.0 ) / ( 23.0 - 21.0 ) );
	if ( x <= 24.0 )	return 1.0 + ( 0.0 - 1.0 ) * ( ( x - 23.0 ) / ( 24.0 - 23.0 ) );
}

double FunctionBlock_test::membership_temperatura_in_goraco(double x) {
	if ( x <= 22.0 )	return 0.0;
	if ( x > 27.0 )	return 1.0;
	if ( x <= 26.0 )	return 0.0 + ( 1.0 - 0.0 ) * ( ( x - 22.0 ) / ( 26.0 - 22.0 ) );
	if ( x <= 27.0 )	return 1.0 + ( 1.0 - 1.0 ) * ( ( x - 26.0 ) / ( 27.0 - 26.0 ) );
}

double FunctionBlock_test::membership_temperatura_in_umiarkowanie(double x) {
	if ( x <= 19.0 )	return 1.0;
	if ( x > 21.0 )	return 0.0;
	if ( x <= 20.0 )	return 1.0 + ( 1.0 - 1.0 ) * ( ( x - 19.0 ) / ( 20.0 - 19.0 ) );
	if ( x <= 21.0 )	return 1.0 + ( 0.0 - 1.0 ) * ( ( x - 20.0 ) / ( 21.0 - 20.0 ) );
}

double FunctionBlock_test::membership_temperatura_in_zimno(double x) {
	if ( x <= 12.0 )	return 1.0;
	if ( x > 17.0 )	return 0.0;
	if ( x <= 15.0 )	return 1.0 + ( 1.0 - 1.0 ) * ( ( x - 12.0 ) / ( 15.0 - 12.0 ) );
	if ( x <= 17.0 )	return 1.0 + ( 0.0 - 1.0 ) * ( ( x - 15.0 ) / ( 17.0 - 15.0 ) );
}

double FunctionBlock_test::membership_temperatura_out_chlodno(double x) {
	if ( x <= -5.0 )	return 1.0;
	if ( x > 10.0 )	return 0.0;
	if ( x <= 0.0 )	return 1.0 + ( 1.0 - 1.0 ) * ( ( x - -5.0 ) / ( 0.0 - -5.0 ) );
	if ( x <= 10.0 )	return 1.0 + ( 0.0 - 1.0 ) * ( ( x - 0.0 ) / ( 10.0 - 0.0 ) );
}

double FunctionBlock_test::membership_temperatura_out_cieplo(double x) {
	if ( x <= 20.0 )	return 1.0;
	if ( x > 30.0 )	return 0.0;
	if ( x <= 25.0 )	return 1.0 + ( 1.0 - 1.0 ) * ( ( x - 20.0 ) / ( 25.0 - 20.0 ) );
	if ( x <= 30.0 )	return 1.0 + ( 0.0 - 1.0 ) * ( ( x - 25.0 ) / ( 30.0 - 25.0 ) );
}

double FunctionBlock_test::membership_temperatura_out_goraco(double x) {
	if ( x <= 25.0 )	return 0.0;
	if ( x > 40.0 )	return 1.0;
	if ( x <= 35.0 )	return 0.0 + ( 1.0 - 0.0 ) * ( ( x - 25.0 ) / ( 35.0 - 25.0 ) );
	if ( x <= 40.0 )	return 1.0 + ( 1.0 - 1.0 ) * ( ( x - 35.0 ) / ( 40.0 - 35.0 ) );
}

double FunctionBlock_test::membership_temperatura_out_umiarkowanie(double x) {
	if ( x <= 10.0 )	return 1.0;
	if ( x > 20.0 )	return 0.0;
	if ( x <= 15.0 )	return 1.0 + ( 1.0 - 1.0 ) * ( ( x - 10.0 ) / ( 15.0 - 10.0 ) );
	if ( x <= 20.0 )	return 1.0 + ( 0.0 - 1.0 ) * ( ( x - 15.0 ) / ( 20.0 - 15.0 ) );
}

double FunctionBlock_test::membership_temperatura_out_zimno(double x) {
	if ( x <= -20.0 )	return 1.0;
	if ( x > 0.0 )	return 0.0;
	if ( x <= -10.0 )	return 1.0 + ( 1.0 - 1.0 ) * ( ( x - -20.0 ) / ( -10.0 - -20.0 ) );
	if ( x <= 0.0 )	return 1.0 + ( 0.0 - 1.0 ) * ( ( x - -10.0 ) / ( 0.0 - -10.0 ) );
}


// Print 
void FunctionBlock_test::print() {
	printf("Function block test:\n");
	printf("	Output %20s : %f\n", "klima" , klima);
	printf("	Input  %20s : %f\n", "temperatura_in" , temperatura_in);
	printf("	       %20s : %f\n", "temperatura_in_chlodno" , temperatura_in_chlodno);
	printf("	       %20s : %f\n", "temperatura_in_cieplo" , temperatura_in_cieplo);
	printf("	       %20s : %f\n", "temperatura_in_goraco" , temperatura_in_goraco);
	printf("	       %20s : %f\n", "temperatura_in_umiarkowanie" , temperatura_in_umiarkowanie);
	printf("	       %20s : %f\n", "temperatura_in_zimno" , temperatura_in_zimno);
	printf("	Input  %20s : %f\n", "temperatura_out" , temperatura_out);
	printf("	       %20s : %f\n", "temperatura_out_chlodno" , temperatura_out_chlodno);
	printf("	       %20s : %f\n", "temperatura_out_cieplo" , temperatura_out_cieplo);
	printf("	       %20s : %f\n", "temperatura_out_goraco" , temperatura_out_goraco);
	printf("	       %20s : %f\n", "temperatura_out_umiarkowanie" , temperatura_out_umiarkowanie);
	printf("	       %20s : %f\n", "temperatura_out_zimno" , temperatura_out_zimno);
}

// Reset output
void FunctionBlock_test::reset() {
	for( int i=0 ; i < 1000 ; i++ )	{ defuzzify_klima[i] = 0.0; }
}

int main(int argc, char *argv[]) {
	// Create function blocks
	FunctionBlock_test test;

	// Parse input
	if( argc > 1 ) { test.temperatura_in = atof(argv[1]); }
	if( argc > 2 ) { test.temperatura_out = atof(argv[2]); }

	// Calculate
	test.calc();

	// Show results
	test.print();
}
